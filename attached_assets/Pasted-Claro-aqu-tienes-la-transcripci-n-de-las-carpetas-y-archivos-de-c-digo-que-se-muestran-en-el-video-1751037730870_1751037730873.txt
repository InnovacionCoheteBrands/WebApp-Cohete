Claro, aquí tienes la transcripción de las carpetas y archivos de código que se muestran en el video.

Carpeta: src/components/dashboard/
Archivo: quick-actions.tsx
Generated tsx
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Link } from "wouter";
import { useQuery } from "@tanstack/react-query";
import { CalendarDays, CalendarPlus, Clock, LucideIcon } from "lucide-react";

export default function QuickActions() {
  // Fetch project count
  const { data: projects } = useQuery<any[]>({
    queryKey: ["/api/projects"],
    staleTime: 30000,
  });

  // Fetch recent schedules
  const { data: schedules } = useQuery<any[]>({
    queryKey: ["/api/schedules/recent"],
    staleTime: 30000,
  });

  const activeProjectsCount = projects?.length || 0;
  const recentSchedulesCount = schedules?.length || 0;
  const pendingTasksCount = 3; // This could be fetched from an API in the future

  return (
    <div className="space-y-6">
      {/* Primera fila: Acciones principales */}
      <div className="grid gap-6 md:grid-cols-3">
        {/* Proyectos activos */}
        <Card className="group overflow-hidden transition-all duration-300 hover:shadow-lg dark:border-[#2a3349] dark:shadow-[0_5px_20px_rgba(0,0,0,0.3)] dark:bg-[#1a1d2d] relative before:absolute before:top-0 before:h-1 before:w-full before:bg-primary dark:before:bg-[#65cef5]">
          <CardContent className="p-0">
            <div className="p-5 relative z-10">
              <div className="flex items-start justify-between">
                <div className="space-y-1.5">
                  <h3 className="font-semibold text-lg tracking-tight dark:text-white group-hover:text-primary dark:group-hover:text-[#65cef5] transition-colors duration-300">Proyectos Activos</h3>
                  <p className="text-sm text-muted-foreground dark:text-slate-400">
                    Campañas de marketing actualmente activas
                  </p>
                </div>
                <div className="flex h-14 w-14 items-center justify-center rounded-full bg-primary/10 text-primary dark:bg-[#65cef5] dark:text-[#65cef5] dark:shadow-[0_0_10px_rgba(101,206,245,0.15)] dark:border dark:border-[#3e4a6d] group-hover:scale-110 group-hover:rotate-3 transition-all duration-300">
                  <span className="font-semibold text-xl">{activeProjectsCount}</span>
                </div>
              </div>
              <div className="mt-4 space-y-2.5">
                <div className="h-1.5 bg-slate-100 dark:bg-slate-800 rounded-full overflow-hidden">
                  <div className="h-full bg-primary dark:bg-[#65cef5]" style={{ width: `${activeProjectsCount > 0 ? Math.min((activeProjectsCount / 10) * 100, 100) : 0}%` }}></div>
                </div>
                <div className="text-xs text-muted-foreground dark:text-slate-400 flex justify-between">
                  <span>Total: {activeProjectsCount}</span>
                  <span className="font-medium text-primary dark:text-[#65cef5]">{activeProjectsCount > 0 ? Math.min(Math.round((activeProjectsCount / 10) * 100), 100) : 0}%</span>
                </div>
              </div>
            </div>
            <div className="mt-2 px-5 pb-5">
              <Link href="/projects" className="block w-full">
                <Button className="w-full relative overflow-hidden group dark:bg-[#2a3349] dark:text-white dark:hover:bg-[#37415b] font-medium shadow-sm dark:shadow-[0_2px_10px_rgba(0,0,0,0.2)]">
                  <span className="relative z-10 flex items-center">
                    Ver Todos los Proyectos
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 ml-2" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                      <path d="m5 12h14" />
                      <path d="m12 5 7 7-7 7" />
                    </svg>
                  </span>
                  <div className="absolute inset-0 translate-y-[100%] bg-primary-foreground/10 transition-transform duration-300 group-hover:translate-y-[0%] dark:bg-[#65cef5]/10"></div>
                </Button>
              </Link>
            </div>
          </CardContent>
        </Card>

        {/* Calendarios recientes */}
        <Card className="group overflow-hidden transition-all duration-300 hover:shadow-lg dark:border-[#2a3349] dark:shadow-[0_5px_20px_rgba(0,0,0,0.3)] dark:bg-[#1a1d2d] relative before:absolute before:top-0 before:h-1 before:w-full before:bg-amber-500">
          <CardContent className="p-0">
            <div className="p-5 relative z-10">
              <div className="flex items-start justify-between">
                <div className="space-y-1.5">
                  <h3 className="font-semibold text-lg tracking-tight dark:text-white group-hover:text-amber-600 dark:group-hover:text-amber-400 transition-colors duration-300">Calendarios Recientes</h3>
                  <p className="text-sm text-muted-foreground dark:text-slate-400">
                    Calendarios de contenido generados recientemente
                  </p>
                </div>
                <div className="flex h-14 w-14 items-center justify-center rounded-full bg-amber-500/10 text-amber-600 dark:text-amber-300 dark:shadow-[0_0_10px_rgba(245,158,11,0.15)] dark:border dark:border-amber-600/30 group-hover:scale-110 group-hover:rotate-3 transition-all duration-300">
                  <span className="font-semibold text-xl">{recentSchedulesCount}</span>
                </div>
              </div>
              <div className="mt-4 space-y-2.5">
                <div className="h-1.5 bg-slate-100 dark:bg-amber-500/00 rounded-full overflow-hidden">
                  <div className="h-full bg-amber-500" style={{ width: `${recentSchedulesCount > 0 ? Math.min((recentSchedulesCount / 5) * 100, 100) : 0}%` }}></div>
                </div>
                <div className="text-xs text-muted-foreground dark:text-slate-400 flex justify-between">
                  <span>Total: {recentSchedulesCount}</span>
                  <span className="font-medium text-amber-600 dark:text-amber-400">{recentSchedulesCount > 0 ? Math.min(Math.round((recentSchedulesCount / 5) * 100), 100) : 0}%</span>
                </div>
              </div>
            </div>
            <div className="mt-2 px-5 pb-5">
              <Link href="/projects" className="block w-full">
                <Button className="w-full bg-amber-500 hover:bg-amber-600 relative overflow-hidden group dark:bg-amber-600 dark:hover:bg-amber-700 text-white h-11 font-medium shadow-sm dark:shadow-[0_2px_10px_rgba(0,0,0,0.2)]">
                  <span className="relative z-10 flex items-center">
                    Ver Calendarios
                    <CalendarDays className="ml-2 h-4 w-4" />
                  </span>
                  <div className="absolute inset-0 translate-y-[100%] bg-amber-600/20 transition-transform duration-300 group-hover:translate-y-[0%] dark:bg-amber-400/20"></div>
                </Button>
              </Link>
            </div>
          </CardContent>
        </Card>

        {/* Tareas pendientes */}
        <Card className="group overflow-hidden transition-all duration-300 hover:shadow-lg dark:border-[#2a3349] dark:shadow-[0_5px_20px_rgba(0,0,0,0.3)] dark:bg-[#1a1d2d] relative before:absolute before:top-0 before:h-1 before:w-full before:bg-destructive dark:before:bg-red-500">
          <CardContent className="p-0">
            <div className="p-5 relative z-10">
              <div className="flex items-start justify-between">
                <div className="space-y-1.5">
                  <h3 className="font-semibold text-lg tracking-tight dark:text-white group-hover:text-destructive dark:group-hover:text-red-400 transition-colors duration-300">Tareas Pendientes</h3>
                  <p className="text-sm text-muted-foreground dark:text-slate-400">
                    Tareas que requieren tu atención inmediata
                  </p>
                </div>
                <div className="flex h-14 w-14 items-center justify-center rounded-full bg-destructive/10 text-destructive dark:text-red-300 dark:shadow-[0_0_10px_rgba(239,68,68,0.15)] dark:border dark:border-red-500/30 group-hover:scale-110 group-hover:rotate-3 transition-all duration-300">
                  <span className="font-semibold text-xl">{pendingTasksCount}</span>
                </div>
              </div>
              <div className="mt-4 space-y-2.5">
                <div className="h-1.5 bg-slate-100 dark:bg-slate-800 rounded-full overflow-hidden">
                  <div className="h-full bg-destructive dark:bg-red-500/80" style={{ width: `${pendingTasksCount > 0 ? Math.min((pendingTasksCount / 10) * 100, 100) : 0}%` }}></div>
                </div>
                <div className="text-xs text-muted-foreground dark:text-slate-400 flex justify-between">
                  <span>Total: {pendingTasksCount}</span>
                  <span className="font-medium text-destructive dark:text-red-400">{pendingTasksCount > 0 ? Math.min(Math.round((pendingTasksCount / 10) * 100), 100) : 0}%</span>
                </div>
              </div>
            </div>
            <div className="mt-2 px-5 pb-5">
              <Link href="/tasks" className="block w-full">
                <Button variant="outline" className="w-full border-destructive bg-destructive/10 text-destructive hover:bg-destructive/20 relative overflow-hidden group dark:bg-red-950/30 dark:hover:bg-red-900/40 dark:border-red-800/50 dark:text-red-300 h-11 font-medium shadow-sm dark:shadow-[0_2px_10px_rgba(0,0,0,0.2)]">
                  <span className="relative z-10 flex items-center">
                    Ver Tareas
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 ml-2" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                      <path d="m9 12 2 2 4-4" />
                      <path d="M12 22c5.523 0 10-4.477 10-10S17.523 2 12 2 2 6.477 2 12s4.477 10 10 10z" />
                    </svg>
                  </span>
                  <div className="absolute inset-0 translate-y-[100%] bg-destructive/10 transition-transform duration-300 group-hover:translate-y-[0%] dark:bg-red-500/10"></div>
                </Button>
              </Link>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Segunda fila: Creación de Calendarios */}
      <div className="grid gap-6 md:grid-cols-2">
        {/* Calendario Rápido */}
        <Card className="group overflow-hidden transition-all duration-300 hover:shadow-lg dark:border-[#2a3349] dark:shadow-[0_5px_20px_rgba(0,0,0,0.3)] dark:bg-[#1a1d2d] relative before:absolute before:top-0 before:h-1 before:w-full before:bg-blue-500">
          <CardContent className="p-0">
            <div className="p-5 relative z-10">
              <div className="flex items-start">
                <div className="flex h-12 w-12 items-center justify-center rounded-lg bg-blue-500/10 text-blue-600 mr-4 dark:bg-blue-500/20 dark:text-blue-300 dark:shadow-[0_0_10px_rgba(59,130,246,0.15)] group-hover:scale-110 transition-transform duration-300">
                  <Clock className="h-6 w-6" />
                </div>
                <div className="space-y-1.5">
                  <h3 className="font-semibold text-lg tracking-tight dark:text-white group-hover:text-blue-600 dark:group-hover:text-blue-400 transition-colors duration-300">Calendario Rápido</h3>
                  <p className="text-sm text-muted-foreground dark:text-slate-400">
                    Genera un calendario básico con pocas opciones en segundos
                  </p>
                </div>
              </div>
              <div className="mt-5 grid grid-cols-1 md:grid-cols-2 gap-1.5">
                <div className="space-y-1 text-sm p-3 rounded-lg bg-white/80 border border-gray-100 shadow-sm dark:bg-[#1e293b] dark:border-[#3e4a6d] group-hover:border-blue-200 dark:group-hover:border-blue-800/30 transition-colors duration-300">
                  <div className="font-medium dark:text-white flex items-center gap-1.5">
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-3.5 w-3.5 text-blue-500" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                      <circle cx="12" cy="12" r="10" />
                      <polyline points="12 6 12 12 16 14" />
                    </svg>
                    Tiempo estimado
                  </div>
                  <div className="text-muted-foreground dark:text-slate-400 pl-5">1-2 minutos</div>
                </div>
                <div className="space-y-1 text-sm p-3 rounded-lg bg-white/80 border border-gray-100 shadow-sm dark:bg-[#1e293b] dark:border-[#3e4a6d] group-hover:border-blue-200 dark:group-hover:border-blue-800/30 transition-colors duration-300">
                  <div className="font-medium dark:text-white flex items-center gap-1.5">
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-3.5 w-3.5 text-blue-500" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                      <polyline points="9 11 12 14 22 4" />
                      <path d="M21 12v7a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11" />
                    </svg>
                    Opciones
                  </div>
                  <div className="text-muted-foreground dark:text-slate-400 pl-5">Básicas</div>
                </div>
              </div>
            </div>
            <div className="mt-2 px-5 pb-5">
              <Link href="#crear-calendario-rapido" className="block w-full">
                <Button className="w-full bg-blue-500 hover:bg-blue-600 text-white shadow-sm dark:bg-blue-600 dark:hover:bg-blue-700 dark:shadow-[0_2px_10px_rgba(0,0,0,0.2)] h-11 font-medium relative overflow-hidden group">
                  <span className="relative z-10 flex items-center">
                    Crear Calendario Rápido
                    <Clock className="ml-2 h-4 w-4" />
                  </span>
                  <div className="absolute inset-0 translate-y-[100%] bg-blue-600/20 transition-transform duration-300 group-hover:translate-y-[0%] dark:bg-blue-500/20"></div>
                </Button>
              </Link>
            </div>
          </CardContent>
        </Card>

        {/* Calendario Avanzado */}
        <Card className="group overflow-hidden transition-all duration-300 hover:shadow-lg dark:border-[#2a3349] dark:shadow-[0_5px_20px_rgba(0,0,0,0.3)] dark:bg-[#1a1d2d] relative before:absolute before:top-0 before:h-1 before:w-full before:bg-amber-500">
          <CardContent className="p-0">
            <div className="p-5 relative z-10">
              <div className="flex items-start">
                <div className="flex h-12 w-12 items-center justify-center rounded-lg bg-amber-500/10 text-amber-600 mr-4 dark:bg-amber-500/20 dark:text-amber-300 dark:shadow-[0_0_10px_rgba(245,158,11,0.15)] group-hover:scale-110 transition-transform duration-300">
                  <CalendarPlus className="h-6 w-6" />
                </div>
                <div className="space-y-1.5">
                  <h3 className="font-semibold text-lg tracking-tight dark:text-white group-hover:text-amber-600 dark:group-hover:text-amber-400 transition-colors duration-300">Calendario Avanzado</h3>
                  <p className="text-sm text-muted-foreground dark:text-slate-400">
                    Control total sobre plataformas, tipos y distribución de contenido
                  </p>
                </div>
              </div>
              <div className="mt-5 grid grid-cols-1 md:grid-cols-2 gap-1.5">
                <div className="space-y-1 text-sm p-3 rounded-lg bg-white/80 border border-gray-100 shadow-sm dark:bg-[#1e293b] dark:border-[#3e4a6d] group-hover:border-amber-200 dark:group-hover:border-amber-800/30 transition-colors duration-300">
                  <div className="font-medium dark:text-white flex items-center gap-1.5">
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-3.5 w-3.5 text-amber-500" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                      <circle cx="12" cy="12" r="10" />
                      <polyline points="12 6 12 12 16 14" />
                    </svg>
                    Tiempo estimado
                  </div>
                  <div className="text-muted-foreground dark:text-slate-400 pl-5">5-10 minutos</div>
                </div>
                <div className="space-y-1 text-sm p-3 rounded-lg bg-white/80 border border-gray-100 shadow-sm dark:bg-[#1e293b] dark:border-[#3e4a6d] group-hover:border-amber-200 dark:group-hover:border-amber-800/30 transition-colors duration-300">
                  <div className="font-medium dark:text-white flex items-center gap-1.5">
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-3.5 w-3.5 text-amber-500" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                      <polyline points="9 11 12 14 22 4" />
                      <path d="M21 12v7a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11" />
                    </svg>
                    Opciones
                  </div>
                  <div className="text-muted-foreground dark:text-slate-400 pl-5">Avanzadas y detalladas</div>
                </div>
              </div>
            </div>
            <div className="mt-2 px-5 pb-5">
              <Link href="/calendar-creator" className="block w-full">
                <Button className="w-full bg-amber-500 hover:bg-amber-600 text-white shadow-sm dark:bg-amber-600 dark:hover:bg-amber-700 dark:shadow-[0_2px_10px_rgba(0,0,0,0.2)] h-11 font-medium relative overflow-hidden group">
                  <span className="relative z-10 flex items-center">
                    Crear Calendario Avanzado
                    <CalendarPlus className="ml-2 h-4 w-4" />
                  </span>
                  <div className="absolute inset-0 translate-y-[100%] bg-amber-600/20 transition-transform duration-300 group-hover:translate-y-[0%] dark:bg-amber-400/20"></div>
                </Button>
              </Link>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}

Carpeta: src/pages/
Archivo: dashboard.tsx
Generated tsx
import { useQuery } from "@tanstack/react-query";
import { useToast } from "@/hooks/use-toast";
import WelcomeSection from "@/components/dashboard/welcome-section";
import QuickActions from "@/components/dashboard/quick-actions";
import CreateScheduleSection from "@/components/dashboard/create-schedule-section";
import RecentProjects from "@/components/dashboard/recent-projects";
import RecentSchedules from "@/components/dashboard/recent-schedules";

export default function Dashboard() {
  const { toast } = useToast();

  const { data: user, error: userError } = useQuery({
    queryKey: ['user'],
    queryFn: async () => {
      const res = await fetch('/api/user');
      if (!res.ok) throw new Error('Error al cargar datos del usuario');
      return res.json();
    },
    retry: 1,
    onError: () => {
      toast({
        title: "Error",
        description: "No se pudo cargar la información del usuario",
        variant: "destructive"
      })
    }
  });

  const { data: projects, error: projectsError } = useQuery({
    queryKey: ['projects'],
    queryFn: async () => {
      const res = await fetch('/api/projects');
      if (!res.ok) throw new Error('Error al cargar proyectos');
      return res.json();
    },
    retry: 1,
    onError: () => {
      toast({
        title: "Error",
        description: "No se pudo cargar los proyectos",
        variant: "destructive"
      })
    }
  });

  const { data: schedules, error: schedulesError } = useQuery({
    queryKey: ['schedules', 'recent'],
    queryFn: async () => {
      const res = await fetch('/api/schedules/recent');
      if (!res.ok) throw new Error('Error al cargar horarios');
      return res.json();
    },
    retry: 1,
    onError: () => {
      toast({
        title: "Error",
        description: "No se pudo cargar los horarios recientes",
        variant: "destructive"
      })
    }
  });

  return (
    <div className="space-y-6 hide-scrollbar">
      <WelcomeSection user={user} />
      <QuickActions />
      <CreateScheduleSection />
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <RecentProjects />
        <RecentSchedules />
      </div>
    </div>
  );
}
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
Tsx
IGNORE_WHEN_COPYING_END
Carpeta: src/components/dashboard/
Archivo: welcome-section.tsx
Generated tsx
import { User } from "@shared/schema";
import { useLocation } from "wouter";
import { Button } from "@/components/ui/button";
import { PlayCircle } from "lucide-react";
import { useAppTourContext } from "@/hooks/use-app-tour";

interface WelcomeSectionProps {
  user: Omit<User, 'password'> | null;
}

export default function WelcomeSection({ user }: WelcomeSectionProps) {
  const [, setLocation] = useLocation();
  const { startTour } = useAppTourContext();

  const goToCreateProject = () => {
    setLocation("/projects");
  };

  return (
    <div className="rounded-xl bg-gradient-to-r from-gray-800 to-gray-900 p-6 text-white shadow-lg relative overflow-hidden dark:from-[#1e293b] dark:to-[#0f172a] dark:border dark:border-[#3e4a6d] dark:shadow-[0_0_25px_rgba(0,0,0,0.3)]"
         data-tour="dashboard-welcome"
    >
      {/* Decorative elements */}
      <div className="absolute top-0 right-0 w-64 h-64 bg-white/5 rounded-full -mr-32 -mt-32 blur-3xl dark:bg-[#65cef5]/10"></div>
      <div className="absolute bottom-0 left-0 w-64 h-64 bg-primary/10 rounded-full -ml-32 -mb-32 blur-3xl dark:bg-[#65cef5]/10"></div>
      <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-96 h-96 bg-white/5 rounded-full blur-3xl opacity-30 dark:bg-[#65cef5]/5 dark:opacity-40"></div>

      <div className="flex flex-col space-y-3 relative z-10">
        <span className="text-xs font-medium uppercase tracking-wider bg-primary/20 text-primary-foreground px-3 py-1 rounded-full self-start block dark:bg-[#65cef5]/30 dark:text-white">
          Panel de Control
        </span>
        <h2 className="text-3xl font-bold tracking-tight dark:text-white">
          {user ? `¡Hola, ${user.fullName.split(' ')[0]}!` : 'Bienvenido a Cohete Workflow'}
        </h2>
        <p className="max-w-3xl text-white/90 text-lg dark:text-white/90">
          Crea, gestiona y organiza tus proyectos de marketing con flujos de trabajo potenciados por IA y programación de contenido.
        </p>
        <div className="mt-4 flex flex-wrap gap-3">
          <Button
            className="rounded-md bg-white px-5 py-2.5 text-sm font-medium text-primary shadow-sm hover:bg-white/90 transition-all duration-200 active:scale-95 dark:bg-[#65cef5] dark:text-[#1a1d2d] dark:hover:bg-[#5bb7dd] dark:shadow-[0_0_10px_rgba(101,206,245,0.2)] flex items-center gap-1.5"
            onClick={() => startTour('dashboard')}
          >
            <PlayCircle className="h-4 w-4" />
            Recorrido Guiado
          </Button>
          <Button
            className="rounded-md bg-gray-700/50 border-white/20 px-5 py-2.5 text-sm font-medium text-white shadow-sm hover:bg-gray-700/70 transition-all duration-200 active:scale-95 dark:bg-[#2a3349] dark:border-[#3e4a6d] dark:text-white dark:hover:bg-[#37415b]"
            onClick={goToCreateProject}
            data-tour="create-project-button"
          >
            Crear Proyecto
          </Button>
        </div>
      </div>
    </div>
  );
}
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
Tsx
IGNORE_WHEN_COPYING_END
Carpeta: src/components/dashboard/
Archivo: recent-projects.tsx
Generated tsx
import { useQuery } from "@tanstack/react-query";
import { Link } from "wouter";
import { useAuth } from "@/hooks/use-auth";
import { format, parseISO } from 'date-fns';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Eye, Pencil, Plus } from "lucide-react";
import { useState } from "react";
import NewProjectModal from "@/components/projects/new-project-modal";

type Project = {
  id: number;
  name: string;
  client: string;
  description: string;
  status: string;
  createdAt: string;
  updatedAt: string;
  startDate?: string | null;
  endDate?: string | null;
  createdBy?: number | null;
};

const StatusBadge = ({ status }: { status: string }) => {
  const getStatusProps = () => {
    switch (status) {
      case "active":
        return {
          className: "bg-emerald-100 text-emerald-800 dark:bg-emerald-900 dark:text-emerald-300",
          label: "Active"
        };
      case "planning":
        return {
          className: "bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300",
          label: "Planning"
        };
      case "completed":
        return {
          className: "bg-slate-100 text-slate-800 dark:bg-slate-900 dark:text-slate-300",
          label: "Completed"
        };
      case "on_hold":
        return {
          className: "bg-amber-100 text-amber-800 dark:bg-amber-900 dark:text-amber-300",
          label: "On Hold"
        };
      default:
        return {
          className: "bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300",
          label: status.charAt(0).toUpperCase() + status.slice(1).replace('_', ' ')
        };
    }
  };

  const { className, label } = getStatusProps();
  return <Badge variant="outline" className={className}>{label}</Badge>;
};

export default function RecentProjects() {
  const { user } = useAuth();
  const [isModalOpen, setIsModalOpen] = useState(false);

  // Fetch projects
  const { data: projects, isLoading, error } = useQuery<Project[]>({
    queryKey: ['/api/projects'],
    staleTime: 60000,
  });

  // Display at most 3 most recent projects
  const recentProjects = projects ? projects.slice(0, 3) : [];

  return (
    <div>
      <div className="mb-4 flex items-center justify-between">
        <h2 className="text-xl font-semibold">Recent Projects</h2>
        {user?.isPrimary && (
          <Button onClick={() => setIsModalOpen(true)} className="inline-flex items-center gap-1">
            <Plus className="h-4 w-4" />
            New Project
          </Button>
        )}
      </div>
      <div className="overflow-hidden rounded-lg border bg-card shadow-sm">
        <div className="overflow-x-auto">
          <Table>
            <TableHeader>
              <TableRow className="border-b bg-muted/50 text-left">
                <TableHead>Project</TableHead>
                <TableHead>Client</TableHead>
                <TableHead>Status</TableHead>
                <TableHead>Last Modified</TableHead>
                <TableHead>Actions</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {isLoading ? (
                <TableRow>
                  <TableCell colSpan={5} className="text-center py-8">
                    <div className="flex justify-center">
                      <div className="animate-spin h-6 w-6 border-4 border-primary border-t-transparent rounded-full"></div>
                    </div>
                  </TableCell>
                </TableRow>
              ) : error ? (
                <TableRow>
                  <TableCell colSpan={5} className="text-center py-8 text-destructive">
                    Error loading projects
                  </TableCell>
                </TableRow>
              ) : recentProjects.length === 0 ? (
                <TableRow>
                  <TableCell colSpan={5} className="text-center py-8 text-muted-foreground">
                    No projects found
                  </TableCell>
                </TableRow>
              ) : (
                recentProjects.map((project: Project) => (
                  <TableRow key={project.id} className="border-b">
                    <TableCell className="whitespace-nowrap px-4 py-3 text-sm font-medium">{project.name}</TableCell>
                    <TableCell className="whitespace-nowrap px-4 py-3 text-sm text-muted-foreground">{project.client}</TableCell>
                    <TableCell className="whitespace-nowrap px-4 py-3 text-sm">
                      <StatusBadge status={project.status} />
                    </TableCell>
                    <TableCell className="whitespace-nowrap px-4 py-3 text-sm text-muted-foreground">
                      {format(parseISO(project.updatedAt), 'MMM d, yyyy')}
                    </TableCell>
                    <TableCell className="whitespace-nowrap px-4 py-3 text-sm">
                      <div className="flex items-center gap-2">
                        <Link href={`/projects/${project.id}`}>
                          <Button variant="ghost" size="icon" className="h-8 w-8">
                            <Eye className="h-4 w-4" />
                          </Button>
                        </Link>
                        {user?.isPrimary && (
                          <Button variant="ghost" size="icon" className="h-8 w-8">
                            <Pencil className="h-4 w-4" />
                          </Button>
                        )}
                      </div>
                    </TableCell>
                  </TableRow>
                ))
              )}
            </TableBody>
          </Table>
        </div>
        <div className="flex items-center justify-between border-t px-4 py-3">
          <p className="text-sm text-muted-foreground">
            Showing <strong>{recentProjects.length}</strong> of <strong>{projects?.length || 0}</strong> projects
          </p>
          <Link href="/projects">
            <Button variant="outline" size="sm">View All Projects</Button>
          </Link>
        </div>
      </div>
      <NewProjectModal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)} />
    </div>
  );
}
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
Tsx
IGNORE_WHEN_COPYING_END
Carpeta: src/components/dashboard/
Archivo: recent-schedules.tsx
Generated tsx
import { useQuery } from "@tanstack/react-query";
import { Link } from "wouter";
import { format, parseISO } from "date-fns";
import { Card, CardContent, CardFooter } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Calendar, Download } from "lucide-react";

interface ScheduleEntry {
  id: number;
  title: string;
  platform: string;
  postDate: string;
  hashtags: string;
}

interface Schedule {
  id: number;
  name: string;
  project: {
    id: number;
    name: string;
    client: string;
  };
  createdAt: string;
  entries: ScheduleEntry[];
}

export default function RecentSchedules() {
  // Fetch recent schedules
  const { data: schedules, isLoading, error } = useQuery<Schedule[]>({
    queryKey: ['/api/schedules/recent'],
    staleTime: 60000,
  });

  if (isLoading) {
    return (
      <div>
        <h2 className="mb-4 text-xl font-semibold">Recent Schedules</h2>
        <div className="flex justify-center items-center h-48">
          <div className="animate-spin h-8 w-8 border-4 border-primary border-t-transparent rounded-full"></div>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div>
        <h2 className="mb-4 text-xl font-semibold">Recent Schedules</h2>
        <div className="p-4 border rounded-md bg-red-50 text-red-700">
          <p>Error loading schedules: {(error as Error).message}</p>
        </div>
      </div>
    );
  }

  if (!schedules || schedules.length === 0) {
    return (
      <div>
        <h2 className="mb-4 text-xl font-semibold">Recent Schedules</h2>
        <div className="p-8 border rounded-md text-center text-muted-foreground">
          <p>No schedules have been created yet.</p>
          <p className="mt-2">Generate a schedule from the "Create Quick Schedule" section above.</p>
        </div>
      </div>
    );
  }

  return (
    <div className="h-full flex flex-col overflow-hidden" data-tour="recent-schedules">
      <h2 className="mb-3 text-lg font-semibold flex-shrink-0">Recent Schedules</h2>
      <div className="flex-1 overflow-hidden">
        <div className="grid gap-3 grid-cols-1 h-full">
          {schedules.slice(0, 2).map((schedule) => (
            <Card key={schedule.id} className="shadow-sm h-fit bg-card text-card-foreground border-border">
              <CardContent className="border-b p-3">
                <div className="flex items-center justify-between">
                  <h3 className="font-medium text-sm truncate">{schedule.name}</h3>
                  <Badge variant="secondary" className="text-xs">
                    New
                  </Badge>
                </div>
                <p className="mt-1 text-xs text-muted-foreground">{schedule.project.client}</p>
              </CardContent>
              <div className="space-y-2 p-3">
                {/* Show placeholder if no entries are available */}
                {schedule.entries.length === 0 ? (
                  <div className="flex items-center justify-center h-16 text-xs text-muted-foreground">
                    Loading schedule entries...
                  </div>
                ) : (
                  // Show first entry from the schedule
                  schedule.entries.slice(0, 1).map((entry) => (
                    <div key={entry.id} className="flex items-start gap-2 rounded-md border p-2">
                      <div className="flex h-6 w-6 flex-shrink-0 items-center justify-center rounded-full bg-primary/10 text-primary">
                        <Calendar className="h-3 w-3" />
                      </div>
                      <div className="min-w-0 flex-1">
                        <div className="font-medium text-xs truncate">{entry.title}</div>
                        <div className="mt-1 text-xs text-muted-foreground">
                          {format(parseISO(entry.postDate), 'MMM d')} • {entry.platform}
                        </div>
                      </div>
                    </div>
                  ))
                )}
              </div>
              <CardFooter className="flex items-center justify-between border-t p-2">
                <div className="flex items-center gap-1">
                  <Button variant="ghost" size="sm"
                    onClick={() => window.open(`/api/schedules/${schedule.id}/download?format=excel`, '_blank')}
                  >
                    <Download className="h-3 w-3" />
                    <span className="text-xs">Excel</span>
                  </Button>
                </div>
                <Link href={`/projects/${schedule.project.id}?tab=workflows`}>
                  <Button variant="secondary" size="sm" className="h-6 px-2 text-xs">Ver</Button>
                </Link>
              </CardFooter>
            </Card>
          ))}
        </div>
      </div>
    </div>
  );
}
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
Tsx
IGNORE_WHEN_COPYING_END
Carpeta: src/components/dashboard/
Archivo: create-schedule-section.tsx
Generated tsx
import { useState, useEffect } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import { useQuery, useMutation } from "@tanstack/react-query";
import { apiRequest, queryClient } from "@/lib/queryClient";
import { useToast } from "@/hooks/use-toast";
import { Card, CardContent } from "@/components/ui/card";
import { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Button } from "@/components/ui/button";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Badge } from "@/components/ui/badge";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { CalendarIcon, Clock, Share2, Download, CheckCircle, Edit, AlertCircle, ThumbsUp, Sparkles } from "lucide-react";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from "@/components/ui/accordion";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import { Calendar } from "@/components/ui/calendar";
import { format } from "date-fns";
import { es } from "date-fns/locale";

// Tipo para las entradas del horario
type ScheduleEntry = {
  id: number;
  title: string;
  platform: string;
  postDate: string;
  postTime: string;
  content: string;
  copyIn: string;
  copyOut: string;
  designInstructions: string;
  hashtags: string;
  referenceImageUrl?: string;
};

// Tipo para el horario completo
type Schedule = {
  id: number;
  name: string;
  projectId: number;
  entries: ScheduleEntry[];
};

const createScheduleSchema = z.object({
  projectId: z.string().min(1, "Please select a project"),
  startDate: z.string().min(1, "Start date is required"),
  specifications: z.string().optional(),
  // Instrucciones adicionales removidas para ser añadidas en la vista detallada
  // Campo aiModel eliminado porque ya no se usa en la base de datos
});

// Tipo para los comentarios de revisión
type ScheduleReview = {
  generalComments: string;
  entryComments: { [entryId: number]: string };
};

export default function CreateScheduleSection() {
  const { toast } = useToast();
  const [isGenerating, setIsGenerating] = useState(false);
  const [generatedSchedule, setGeneratedSchedule] = useState<Schedule | null>(null);
  const [isReviewMode, setIsReviewMode] = useState(false);
  const [reviewComments, setReviewComments] = useState<ScheduleReview>({
    generalComments: '',
    entryComments: {},
  });

  // Fetch projects
  const { data: projects, isLoading: projectsLoading } = useQuery<any[]>({
    queryKey: ['/api/projects'],
    staleTime: 60000,
  });

  // Setup form
  const form = useForm<z.infer<typeof createScheduleSchema>>({
    resolver: zodResolver(createScheduleSchema),
    defaultValues: {
      projectId: "",
      startDate: "",
      specifications: "",
      // additionalInstructions removido
      // aiModel eliminado
    },
  });

  // Create schedule mutation
  const createScheduleMutation = useMutation({
    mutationFn: async (values: z.infer<typeof createScheduleSchema>) => {
      setIsGenerating(true);
      setGeneratedSchedule(null); // Reset any previously generated schedule
      const res = await apiRequest(
        "POST",
        `/api/projects/${values.projectId}/schedule`,
        {
          startDate: values.startDate,
          specifications: values.specifications,
          // Las instrucciones adicionales se añadirán directamente en la vista de detalles
          // El campo aiModel ha sido eliminado
        }
      );
      return await res.json();
    },
    onSuccess: (data: Schedule) => {
      toast({
        title: "Calendario creado",
        description: "Tu calendario de contenido ha sido generado exitosamente",
      });
      setIsGenerating(false);
      setGeneratedSchedule(data); // Store the generated schedule
      queryClient.invalidateQueries({ queryKey: ['/api/schedules/recent'] });
      // Don't reset the form so users can see what they generated
    },
    onError: (error) => {
      toast({
        title: "Error al crear el calendario",
        description: error.message,
        variant: "destructive",
      });
      setIsGenerating(false);
    },
  });

  // Form submission
  const onSubmit = (values: z.infer<typeof createScheduleSchema>) => {
    // Validación adicional para asegurar que se seleccionó un proyecto
    if (!values.projectId) {
      toast({
        title: "Error",
        description: "Por favor, selecciona un proyecto para poder generar el calendario.",
        variant: "destructive",
      });
      return;
    }
    createScheduleMutation.mutate(values);
  };

  // Format date for display
  const formatDate = (dateString: string) => {
    try {
      const date = new Date(dateString);
      return format(date, 'dd/MM/yyyy');
    } catch (e) {
      return dateString;
    }
  };

  // Función para manejar la entrada en modo revisión
  const handleEnterReviewMode = () => {
    setIsReviewMode(true);
    setReviewComments({
      generalComments: '',
      entryComments: {},
    });
    toast({
      title: "Modo de revisión activado",
      description: "Puedes agregar comentarios generales o específicos para cada publicación",
    });
  };

  // Función para manejar la salida del modo revisión
  const handleExitReviewMode = () => {
    setIsReviewMode(false);
    toast({
      title: "Modo de revisión desactivado",
      description: "Has salido del modo de revisión",
    });
  };

  // Función para actualizar los comentarios generales
  const handleGeneralCommentsChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    setReviewComments((prev) => ({
      ...prev,
      generalComments: e.target.value
    }));
  };

  // Función para actualizar los comentarios específicos de una entrada
  const handleEntryCommentChange = (entryId: number, comment: string) => {
    setReviewComments((prev) => ({
      ...prev,
      entryComments: {
        ...prev.entryComments,
        [entryId]: comment,
      },
    }));
  };

  // Función para enviar los comentarios de revisión
  const handleSubmitReview = async () => {
    try {
      // Aquí podrías enviar los comentarios al backend si fuera necesario
      toast({
        title: "Revisión enviada",
        description: "Tus comentarios han sido registrados correctamente",
      });
      setIsReviewMode(false);
    } catch (error) {
      toast({
        title: "Error al enviar revisión",
        description: "Ocurrió un error al enviar tus comentarios",
        variant: "destructive",
      });
    }
  };

  return (
    <div className="space-y-6">
      <Card className="shadow-lg overflow-hidden border-none light-gradient-bg dark:bg-gradient-to-br dark:from-[#1a1d2d] dark:to-[#141825] dark:border dark:border-[#2a3349]">
        <div className="absolute top-0 right-0 w-64 h-64 bg-primary/5 rounded-full -mr-20 -mt-20 blur-3xl dark:bg-[#65cef5]/5"></div>
        <CardContent className="p-8 relative z-10">
          <h2 className="mb-6 text-2xl font-bold tracking-tight flex items-center dark:text-white">
            <span className="mr-3 p-1.5 rounded-lg bg-primary/10 text-blue-500/20 dark:text-blue-300 dark:shadow-[0_0_10px_rgba(59,130,246,0.15)]">
              <CalendarIcon className="h-6 w-6" />
            </span>
            Crear Calendario Rápido
          </h2>
          <div className="grid gap-8 md:grid-cols-2">
            <Form {...form}>
              <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-5">
                <FormField
                  control={form.control}
                  name="projectId"
                  render={({ field }) => (
                    <FormItem className="space-y-2">
                      <FormLabel className="text-sm font-medium dark:text-slate-300">Seleccionar Proyecto</FormLabel>
                      <Select onValueChange={field.onChange} defaultValue={field.value} disabled={projectsLoading}>
                        <FormControl>
                          <SelectTrigger className="h-11 transition-all duration-200 hover:border-primary dark:border-[#3e4a6d] dark:bg-[#1e293b] dark:text-white dark:hover:border-[#65cef5]">
                            <SelectValue placeholder="Elige un proyecto" />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent className="dark:bg-[#1e293b] dark:border-[#3e4a6d]">
                          {projects?.map((project) => (
                            <SelectItem key={project.id} value={project.id.toString()} className="dark:text-white dark:focus:bg-[#2a3349] dark:data-[state=checked]:text-[#65cef5]">
                              {project.name} - {project.client}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="startDate"
                  render={({ field }) => (
                    <FormItem className="space-y-2">
                      <FormLabel className="text-sm font-medium dark:text-slate-300">Fecha de Inicio</FormLabel>
                      <Popover>
                        <PopoverTrigger asChild>
                          <FormControl>
                            <Button
                              variant={"outline"}
                              className="w-full h-11 justify-start text-left font-normal transition-all duration-200 hover:border-primary dark:border-[#3e4a6d] dark:bg-[#1e293b] dark:text-white dark:hover:border-[#65cef5]"
                            >
                              {field.value ? (
                                <span className="flex items-center gap-2">
                                  <CalendarIcon className="h-4 w-4 dark:text-[#65cef5]" />
                                  {format(new Date(field.value), "dd 'de' MMMM 'de' yyyy", { locale: es })}
                                </span>
                              ) : (
                                <span className="text-muted-foreground flex items-center gap-2">
                                  <CalendarIcon className="h-4 w-4" />
                                  Elige la fecha de inicio
                                </span>
                              )}
                            </Button>
                          </FormControl>
                        </PopoverTrigger>
                        <PopoverContent className="w-auto p-0 dark:bg-[#1e293b] dark:border-[#3e4a6d]" align="start">
                          <Calendar
                            mode="single"
                            selected={field.value ? new Date(field.value) : undefined}
                            onSelect={(date) => field.onChange(date ? format(date, "yyyy-MM-dd") : "")}
                            disabled={(date) => date < new Date("1900-01-01")}
                            initialFocus
                            locale={es}
                          />
                        </PopoverContent>
                      </Popover>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="specifications"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel className="text-sm font-medium dark:text-slate-300">Instrucciones Especiales</FormLabel>
                      <Textarea
                        placeholder="Añade cualquier requisito específico o notas para la generación..."
                        className="min-h-[100px] resize-none transition-all duration-200 hover:border-primary focus:border-primary dark:border-[#3e4a6d] dark:bg-[#1e293b] dark:text-white dark:hover:border-[#65cef5] dark:focus:border-[#65cef5]"
                        {...field}
                      />
                    </FormItem>
                  )}
                />
                
                {/* Campo additionalInstructions removido - ahora estará en la vista de detalle del cronograma */}
                {/* La sección de selección de modelo de IA ha sido eliminada */}

                <Button type="submit" className="w-full h-11 mt-2 interactive-element bg-primary text-primary-foreground hover:bg-primary/90"
                  disabled={isGenerating || createScheduleMutation.isPending || !form.watch("projectId")}
                >
                  {isGenerating || createScheduleMutation.isPending ? "Generando Calendario..." : "Generar Calendario"}
                </Button>
              </form>
            </Form>
            <div className="rounded-xl border bg-white p-6 shadow-sm relative overflow-hidden light-hover dark:bg-[#1e293b]/70 dark:border-[#3e4a6d] dark:shadow-[0_0_15px_rgba(0,0,0,0.2)]">
              <div className="absolute top-0 right-0 w-40 h-40 bg-primary/5 rounded-full -mr-20 -mt-20 blur-2xl dark:bg-[#65cef5]/5"></div>
              <h3 className="text-lg font-semibold mb-4 flex items-center tracking-tight dark:text-white">
                <span className="mr-2 p-1.5 rounded-md bg-blue-500/10 text-blue-500 dark:bg-blue-500/20 dark:text-blue-300">
                  <Sparkles className="h-5 w-5" />
                </span>
                Beneficios del Calendario IA
              </h3>
              <div className="space-y-4 text-sm relative z-10">
                <p className="text-muted-foreground leading-relaxed dark:text-slate-400">
                  Selecciona un proyecto y genera un calendario de publicaciones optimizado con nuestra tecnología de IA.
                </p>
                <h4 className="font-medium mb-2 dark:text-[#65cef5]">Tu calendario incluirá:</h4>
                <ul className="space-y-2">
                  {[
                    "Horarios óptimos de publicación",
                    "Temas y tópicos de contenido relevantes",
                    "Sugerencias de texto para cada publicación",
                    "Recomendaciones de hashtags estratégicos",
                    "Ideas para contenido visual efectivo",
                  ].map((item, i) => (
                    <li key={i} className="flex items-start gap-2">
                      <ThumbsUp className="h-4 w-4 mt-0.5 text-primary flex-shrink-0" />
                      <span className="dark:text-white">{item}</span>
                    </li>
                  ))}
                </ul>
                <p className="italic text-muted-foreground text-xs border-l-2 border-primary/20 pl-3 dark:text-slate-400 dark:border-[#65cef5]/30">
                  La IA analizará los datos de tu proyecto para crear un calendario personalizado que se alinee perfectamente con tus objetivos de marketing.
                </p>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>
      
      {/* Tabla de cronograma generado */}
      {generatedSchedule && generatedSchedule.entries.length > 0 && (
        <Card className="shadow-lg overflow-hidden border-none relative light-gradient-bg dark:bg-gradient-to-br dark:from-[#1a1d2d] dark:to-[#141825] dark:border dark:border-[#2a3349]">
          <div className="absolute top-0 left-0 w-64 h-64 bg-blue-500/5 rounded-full -ml-32 -mt-32 blur-3xl dark:bg-[#65cef5]/5"></div>
          <div className="absolute bottom-0 right-0 w-64 h-64 bg-primary/5 rounded-full -mr-32 -mb-32 blur-3xl dark:bg-[#65cef5]/5"></div>
          <CardContent className="p-8 relative z-10">
            <div className="flex flex-col md:flex-row justify-between items-start md:items-center gap-4 mb-6">
              <div className="space-y-1">
                <h2 className="text-2xl font-bold tracking-tight flex items-center gap-2 dark:text-white">
                  <span className="bg-blue-500/10 text-blue-600 p-1.5 rounded-md dark:bg-blue-500/20 dark:text-blue-300 dark:shadow-[0_0_10px_rgba(59,130,246,0.15)]">
                    <CalendarIcon className="h-5 w-5" />
                  </span>
                  {generatedSchedule.name}
                </h2>
                <p className="text-muted-foreground text-sm dark:text-slate-400">
                  Calendario generado el {new Date().toLocaleDateString()}
                </p>
              </div>
              <div className="flex flex-wrap items-center gap-2">
                <Button variant="default" size="sm" className="rounded-lg transition-all duration-200 shadow-sm hover:shadow-interactive-element bg-primary text-foreground hover:bg-primary/90" onClick={() => window.open(`/schedules/${generatedSchedule.id}`, '_blank')}>
                  Ver Completo
                </Button>
                {!isReviewMode && (
                  <Button variant="outline" size="sm" className="rounded-lg gap-1 transition-all duration-200 shadow-sm hover:shadow-amber-500/10 text-amber-600 border-amber-200 hover:border-amber-300 interactive-element dark:border-amber-600/30 dark:text-amber-300 dark:hover:bg-amber-500/10 dark:hover:border-amber-500/20" onClick={handleEnterReviewMode}>
                    <Edit className="h-3.5 w-3.5 mr-1" />
                    Revisar y Comentar
                  </Button>
                )}
                <Button variant="outline" size="sm" className="rounded-lg gap-1 transition-all duration-200 shadow-sm hover:shadow-blue-500/10 border-blue-200 hover:border-blue-300 interactive-element dark:border-[#3e4a6d] dark:text-white dark:hover:bg-blue-500/10 dark:hover:border-blue-500/20" onClick={() => window.open(`/api/schedules/${generatedSchedule.id}/download?format=excel`, '_blank')}>
                  <Download className="h-3.5 w-3.5 mr-1" />
                  Excel
                </Button>
                <Button variant="outline" size="sm" className="rounded-lg gap-1 transition-all duration-200 shadow-sm hover:shadow-red-500/10 border-red-200 hover:border-red-300 interactive-element dark:border-[#3e4a6d] dark:text-white dark:hover:bg-red-500/10 dark:hover:border-red-500/20" onClick={() => window.open(`/api/schedules/${generatedSchedule.id}/download?format=pdf`, '_blank')}>
                  <Download className="h-3.5 w-3.5 mr-1" />
                  PDF
                </Button>
                <Badge className="px-3 py-1.5 bg-blue-500/10 text-blue-600 border-none hover:bg-blue-500/20 transition-colors duration-200 dark:bg-blue-500/20 dark:text-blue-300 shadow-[0_0_10px_rgba(59,130,246,0.15)]">
                  <CalendarIcon className="w-3.5 h-3.5 mr-1.5" />
                  {generatedSchedule.entries.length} publicaciones
                </Badge>
              </div>
            </div>

            <ScrollArea className="h-[450px]">
              <Table className="bg-card shadow-sm dark:bg-[#1e293b] dark:shadow-[0_2px_10px_rgba(0,0,0,0.2)]">
                <TableHeader>
                  <TableRow className="w-[250px] font-medium text-foreground dark:text-[#65cef5]">Título</TableHead>
                  <TableHead className="font-medium text-foreground dark:text-[#65cef5]">Plataforma</TableHead>
                  <TableHead className="font-medium text-foreground dark:text-[#65cef5]">Fecha</TableHead>
                  <TableHead className="font-medium text-foreground dark:text-[#65cef5]">Hora</TableHead>
                  <TableHead className="font-medium text-foreground dark:text-[#65cef5]">Texto en Diseño</TableHead>
                  <TableHead className="text-right font-medium text-foreground dark:text-[#65cef5]">Imagen</TableHead>
                  {isReviewMode && (
                    <TableHead className="text-center font-medium text-amber-600 dark:text-amber-300">
                      Revisión
                    </TableHead>
                  )}
                </TableRow>
              </TableHeader>
              <TableBody>
                {generatedSchedule.entries.map((entry, idx) => (
                  <TableRow key={entry.id} className={`transition-colors duration-200 hover:bg-accent/20 dark:border-b dark:border-[#2a3349] dark:last:border-b-0 dark:hover:bg-[#2a3349]/50 ${
                    isReviewMode && reviewComments.entryComments[entry.id] ? 'bg-amber-50/50 dark:bg-amber-900/10' : ''
                  }`}>
                    <TableCell className="font-medium dark:text-white">{entry.title}</TableCell>
                    <TableCell>
                      <Badge variant="secondary" className="shadow-sm transition-all duration-200 hover:shadow-md dark:bg-blue-500/20 dark:text-blue-300 dark:shadow-[0_0_10px_rgba(59,130,246,0.1)]">
                        <Share2 className="w-3.5 h-3.5 mr-1.5" />
                        {entry.platform}
                      </Badge>
                    </TableCell>
                    <TableCell className="dark:text-slate-300">{formatDate(entry.postDate)}</TableCell>
                    <TableCell className="dark:text-slate-300">{entry.postTime}</TableCell>
                    <TableCell><div className="max-w-[200px] truncate"><p className="line-clamp-2 text-sm hover:text-clip dark:text-slate-300">{entry.copyIn}</p></div></TableCell>
                    <TableCell className="text-right">
                      {entry.referenceImageUrl ? (
                        <img src={entry.referenceImageUrl} alt={entry.title} className="inline-block w-12 h-12 object-cover rounded-md border shadow-sm hover:shadow-md transition-shadow duration-200 dark:border-[#3e4a6d] dark:shadow-[0_0_10px_rgba(0,0,0,0.3)]" />
                      ) : (
                        <span className="text-sm text-muted-foreground italic dark:text-slate-500">Pendiente</span>
                      )}
                    </TableCell>
                    {isReviewMode && (
                      <TableCell className="text-center">
                        <Button variant="ghost" size="sm" className="rounded-full p-2 h-auto w-auto shadow-sm text-amber-600 hover:text-amber-700 hover:bg-amber-100 dark:text-amber-300 dark:hover:bg-amber-900/50"
                          onClick={() => {
                            document.getElementById(`entry-${entry.id}`)?.click();
                            setTimeout(() => {
                              const element = document.getElementById(`entry-${entry.id}-textarea`);
                              if (element) element.focus();
                            }, 300);
                          }}>
                          {reviewComments.entryComments[entry.id] ? (
                            <CheckCircle className="h-5 w-5" />
                          ) : (
                            <Edit className="h-4 w-4" />
                          )}
                        </Button>
                      </TableCell>
                    )}
                  </TableRow>
                ))}
              </TableBody>
              </Table>
            </ScrollArea>
          </CardContent>

          {/* Sección de revisión y comentarios */}
          {isReviewMode && (
            <div className="mt-8 space-y-4">
              <div className="p-4 rounded-lg bg-amber-50 border border-amber-200 dark:bg-amber-900/20 dark:border-amber-800/20">
                <div className="flex items-start gap-3 mb-3">
                  <div className="p-1.5 rounded-full bg-amber-100 text-amber-600 dark:bg-amber-900/50 dark:text-amber-300">
                    <AlertCircle className="h-5 w-5" />
                  </div>
                  <div>
                    <h3 className="text-lg font-semibold text-amber-800 dark:text-amber-300">Modo de Revisión</h3>
                    <p className="text-sm text-amber-700 dark:text-amber-200/80">
                      Puedes agregar comentarios generales o específicos para cada publicación. Estos comentarios serán utilizados para mejorar el cronograma.
                    </p>
                  </div>
                </div>

                <div className="space-y-4">
                  {/* Comentarios generales */}
                  <div>
                    <Label htmlFor="general-comments" className="block text-sm font-medium text-amber-800 dark:text-amber-300">Comentarios Generales</Label>
                    <Textarea
                      id="general-comments"
                      placeholder="Añade cualquier comentario o sugerencia general sobre el cronograma..."
                      value={reviewComments.generalComments}
                      onChange={handleGeneralCommentsChange}
                      rows={4}
                      className="w-full resize-none border-amber-300 focus:border-amber-500 focus:ring-amber-500 dark:border-amber-800/50 dark:bg-[#1e293b] dark:text-white dark:focus:border-amber-600 dark:focus:ring-amber-600"
                    />
                  </div>

                  {/* Comentarios específicos para cada entrada */}
                  <div className="space-y-3">
                    <h4 className="text-sm font-medium text-amber-800 dark:text-amber-300 flex items-center gap-1.5">
                      <Edit className="h-4 w-4" />
                      Comentarios Específicos por Publicación
                    </h4>
                    <Accordion type="single" collapsible className="w-full">
                      {generatedSchedule.entries.map((entry) => (
                        <AccordionItem key={entry.id} value={`entry-${entry.id}`}>
                          <AccordionTrigger className="border-amber-200 dark:border-amber-800/40" id={`entry-${entry.id}`}>
                            <div className="flex items-center gap-2">
                              <Badge variant="outline" className="border-amber-300 text-amber-700 dark:border-amber-700/50 dark:text-amber-300">{entry.platform}</Badge>
                              <span className="text-sm text-amber-600/80 dark:text-amber-400/60">{entry.title}</span>
                              <span className="text-xs text-amber-600/80 dark:text-amber-400/60">({formatDate(entry.postDate)} {entry.postTime})</span>
                            </div>
                          </AccordionTrigger>
                          <AccordionContent className="pt-2">
                            <Textarea
                              id={`entry-${entry.id}-textarea`}
                              placeholder={`Comentarios sobre "${entry.title}"...`}
                              value={reviewComments.entryComments[entry.id] || ''}
                              onChange={(e) => handleEntryCommentChange(entry.id, e.target.value)}
                              rows={3}
                              className="w-full resize-none border-amber-200 focus:border-amber-500 focus:ring-amber-500 dark:border-amber-800/50 dark:bg-[#1e293b] dark:text-white dark:focus:border-amber-600 dark:focus:ring-amber-600"
                            />
                            <div className="mt-2 text-xs text-amber-700 dark:text-amber-400/80">
                              <p>Puedes comentar sobre el título, texto, horario o cualquier otro aspecto de esta publicación.</p>
                            </div>
                          </AccordionContent>
                        </AccordionItem>
                      ))}
                    </Accordion>
                  </div>
                </div>

                {/* Botones de acción */}
                <div className="mt-5 flex justify-end gap-3">
                  <Button variant="outline" onClick={handleExitReviewMode} className="border-amber-300 text-amber-700 hover:bg-amber-50 dark:text-amber-300 dark:hover:bg-amber-900/30 dark:border-amber-800/40">
                    Cancelar
                  </Button>
                  <Button onClick={handleSubmitReview} className="bg-amber-600 text-white hover:bg-amber-700 dark:bg-amber-600 dark:text-white dark:hover:bg-amber-500">
                    <CheckCircle className="h-4 w-4 mr-1.5" />
                    Enviar Comentarios
                  </Button>
                </div>
              </div>
            </div>
          )}
        </Card>
      )}
    </div>
  );
}
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
Tsx
IGNORE_WHEN_COPYING_END