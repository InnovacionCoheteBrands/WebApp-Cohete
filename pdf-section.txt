      } else if (format === 'pdf') {
        // Generar archivo PDF
        const pdf = htmlPdf;
        
        // Obtener el formato según la plataforma
        const getFormatByPlatform = (platform: string): string => {
          const formats: Record<string, string> = {
            'Instagram': 'Carrusel/Reels • 9:16 o 1:1',
            'Facebook': 'Imagen/Video • 16:9 o 1:1',
            'Twitter': 'Imagen/GIF • 16:9',
            'LinkedIn': 'Imagen/Artículo • 16:9 o 1:1',
            'TikTok': 'Video • 9:16 vertical',
            'YouTube': 'Video • 16:9 horizontal',
            'Pinterest': 'Pin • 2:3 vertical',
            'WhatsApp': 'Imagen/Video • 1:1 o 9:16'
          };
          
          return formats[platform] || 'Formato estándar';
        };
        
        // Obtener color según la plataforma
        const getPlatformColor = (platform: string): string => {
          const colors: Record<string, string> = {
            'Instagram': '#E1306C',
            'Facebook': '#1877F2',
            'Twitter': '#1DA1F2',
            'LinkedIn': '#0A66C2',
            'TikTok': '#000000',
            'YouTube': '#FF0000',
            'Pinterest': '#BD081C',
            'WhatsApp': '#25D366'
          };
          
          return colors[platform] || '#4F46E5';
        };
        
        // Crear tabla HTML para el PDF
        let htmlContent = `
          <html>
            <head>
              <style>
                body { 
                  font-family: 'Helvetica', 'Arial', sans-serif; 
                  margin: 0;
                  padding: 20px;
                  color: #333;
                }
                .header {
                  text-align: center;
                  margin-bottom: 30px;
                  padding-bottom: 20px;
                  border-bottom: 2px solid #4F46E5;
                }
                h1 { 
                  font-size: 24px; 
                  margin-bottom: 5px;
                  color: #4F46E5;
                  font-weight: bold;
                }
                .subtitle { 
                  font-size: 16px; 
                  color: #666; 
                  margin-top: 0;
                }
                .info-row {
                  display: flex;
                  justify-content: space-between;
                  margin-bottom: 20px;
                  font-size: 14px;
                }
                .info-item {
                  border: 1px solid #e5e7eb;
                  border-radius: 8px;
                  padding: 10px 15px;
                  background-color: #f9fafb;
                }
                table { 
                  width: 100%;
                  border-collapse: collapse; 
                  margin-top: 20px;
                  box-shadow: 0 1px 3px rgba(0,0,0,0.1);
                  border-radius: 8px;
                  overflow: hidden;
                }
                thead {
                  background-color: #4F46E5;
                  color: white;
                }
                th { 
                  font-weight: bold; 
                  text-align: left;
                  padding: 12px 10px;
                  font-size: 14px;
                }
                td { 
                  padding: 12px 10px; 
                  font-size: 13px;
                  border-bottom: 1px solid #e5e7eb;
                }
                tr:nth-child(even) {
                  background-color: #f9fafb;
                }
                tr:last-child td {
                  border-bottom: none;
                }
                .platform-cell {
                  text-align: center;
                  font-weight: bold;
                  color: white;
                  padding: 10px;
                  border-radius: 4px;
                }
                .format-cell {
                  font-style: italic;
                  color: #6b7280;
                  font-size: 12px;
                }
                .image-cell { 
                  width: 100px; 
                  text-align: center;
                }
                .image-container { 
                  width: 80px; 
                  height: 80px; 
                  overflow: hidden; 
                  display: inline-block; 
                  border-radius: 4px;
                  border: 1px solid #e5e7eb;
                }
                .image-container img { 
                  max-width: 100%; 
                  max-height: 100%; 
                  object-fit: contain;
                }
                .content-truncated {
                  color: #6b7280;
                  font-style: italic;
                  font-size: 11px;
                }
                .footer {
                  margin-top: 30px;
                  text-align: center;
                  font-size: 12px;
                  color: #6b7280;
                  border-top: 1px solid #e5e7eb;
                  padding-top: 15px;
                }
                @page { 
                  size: A4 landscape; 
                  margin: 1cm;
                }
              </style>
            </head>
            <body>
              <div class="header">
                <h1>${schedule.name}</h1>
                <p class="subtitle">Cohete Workflow - Cronograma de Contenido</p>
              </div>
              
              <div class="info-row">
                <div class="info-item">
                  <strong>Proyecto:</strong> ${project.name}
                </div>
                <div class="info-item">
                  <strong>Cliente:</strong> ${project.client}
                </div>
                <div class="info-item">
                  <strong>Fecha de Inicio:</strong> ${schedule.startDate ? new Date(schedule.startDate).toLocaleDateString('es-ES', { 
                    day: '2-digit', month: '2-digit', year: 'numeric' 
                  }) : 'No definida'}
                </div>
                <div class="info-item">
                  <strong>Total de Publicaciones:</strong> ${sortedEntries.length}
                </div>
              </div>
              <div class="info-row">
                <div class="info-item" style="width: 100%;">
                  <strong>Generado el:</strong> ${new Date().toLocaleDateString('es-ES', { 
                    day: '2-digit', month: '2-digit', year: 'numeric', hour: '2-digit', minute: '2-digit'
                  })}
                </div>
              </div>
              
              <table>
                <thead>
                  <tr>
                    <th style="width:10%">Fecha/Hora</th>
                    <th style="width:10%">Plataforma</th>
                    <th style="width:8%">Formato</th>
                    <th style="width:12%">Título</th>
                    <th style="width:17%">Copy In</th>
                    <th style="width:17%">Copy Out</th>
                    <th style="width:16%">Instrucciones</th>
                    <th style="width:10%">Imagen</th>
                  </tr>
                </thead>
                <tbody>
        `;
        
        // Agregar filas a la tabla
        sortedEntries.forEach((entry) => {
          const dateFormatted = entry.postDate 
            ? new Date(entry.postDate).toLocaleDateString('es-ES', { 
                day: '2-digit', month: '2-digit', year: 'numeric' 
              })
            : 'Sin fecha';
          
          const platformColor = getPlatformColor(entry.platform || '');
          const formatText = getFormatByPlatform(entry.platform || '');
          
          const imageHtml = entry.referenceImageUrl 
            ? `<div class="image-container"><img src="${entry.referenceImageUrl}" alt="${entry.title}"></div>` 
            : 'Sin imagen';
            
          const truncateText = (text: string | null, maxLength: number = 150) => {
            if (!text) return '';
            if (text.length <= maxLength) return text;
            return `${text.substring(0, maxLength)}... <div class="content-truncated">(contenido truncado)</div>`;
          };
          
          htmlContent += `
            <tr>
              <td>${dateFormatted}<br>${entry.postTime || ''}</td>
              <td>
                <div class="platform-cell" style="background-color: ${platformColor}">
                  ${entry.platform}
                </div>
              </td>
              <td class="format-cell">${formatText}</td>
              <td><strong>${entry.title}</strong></td>
              <td>${truncateText(entry.copyIn, 150)}</td>
              <td>${truncateText(entry.copyOut, 150)}</td>
              <td>${truncateText(entry.designInstructions, 150)}</td>
              <td class="image-cell">${imageHtml}</td>
            </tr>
          `;
        });
        
        // Cerrar la tabla y el HTML
        htmlContent += `
                </tbody>
              </table>
              
              <div class="footer">
                <p>Este cronograma fue generado automáticamente por Cohete Workflow. Las fechas y contenidos pueden estar sujetos a cambios.</p>
              </div>
            </body>
          </html>
        `;
        
        // Opciones para la generación del PDF
        const options = { 
          format: 'A4',
          landscape: true,
          margin: { top: '1cm', bottom: '1cm', left: '1cm', right: '1cm' },
          printBackground: true,
          preferCSSPageSize: true,
        };
        
        // Generar el PDF
        const file = { content: htmlContent };
        
        try {
          const pdfBuffer = await pdf.generatePdf(file, options);
          
          // Enviar el archivo al cliente
          const safeFileName = schedule.name.replace(/[^a-z0-9]/gi, '_');
          res.setHeader('Content-Type', 'application/pdf');
          res.setHeader('Content-Disposition', `attachment; filename="${safeFileName}.pdf"`);
          res.send(pdfBuffer);
        } catch (pdfError) {
          console.error("Error generating PDF:", pdfError);
          res.status(500).json({ message: "Failed to generate PDF" });
        }
      } else {
